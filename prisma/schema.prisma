// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String   @id @default(cuid())
  email                   String   @unique
  emailVerified          DateTime?
  name                   String?
  firstName              String
  lastName               String
  phoneNumber            String?
  profileImageUrl        String?
  dateHired              DateTime
  annualLeaveEntitlement Int      @default(25)
  carryOverDays          Int      @default(0)
  isActive               Boolean  @default(true)
  department             String?
  position               String?
  role                   Role     @default(EMPLOYEE)
  hashedPassword         String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  // Relations
  holidays               Holiday[]
  bonuses                HolidayBonus[]
  approvedHolidays       Holiday[]      @relation("ApprovedBy")
  notifications          Notification[]
  accounts               Account[]
  sessions               Session[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Holiday {
  id             String        @id @default(cuid())
  userId         String
  startDate      DateTime
  endDate        DateTime
  totalDays      Int
  workingDays    Int
  holidayType    HolidayType   @default(ANNUAL)
  status         HolidayStatus @default(PENDING)
  notes          String?
  dateRequested  DateTime      @default(now())
  dateApproved   DateTime?
  approvedById   String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  // Relations
  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvedBy User?          @relation("ApprovedBy", fields: [approvedById], references: [id])
  bonus      HolidayBonus?
  notifications Notification[]

  @@map("holidays")
}

model HolidayBonus {
  id          String   @id @default(cuid())
  holidayId   String   @unique
  userId      String
  amount      Decimal  @db.Decimal(10, 2)
  currency    String   @default("USD")
  dateAwarded DateTime @default(now())
  notes       String?
  fiscalYear  Int
  createdAt   DateTime @default(now())

  // Relations
  holiday Holiday @relation(fields: [holidayId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holiday_bonuses")
}

model Notification {
  id               String           @id @default(cuid())
  userId           String
  type             NotificationType
  title            String
  message          String
  isRead           Boolean          @default(false)
  relatedHolidayId String?
  createdAt        DateTime         @default(now())

  // Relations
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  relatedHoliday Holiday? @relation(fields: [relatedHolidayId], references: [id])

  @@map("notifications")
}

enum Role {
  ADMIN
  MANAGER
  EMPLOYEE
}

enum HolidayType {
  ANNUAL
  SICK
  PERSONAL
  MATERNITY
  PATERNITY
  EMERGENCY
}

enum HolidayStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum NotificationType {
  HOLIDAY_REQUEST
  HOLIDAY_APPROVED
  HOLIDAY_REJECTED
  HOLIDAY_CANCELLED
  BONUS_AWARDED
  SYSTEM_UPDATE
}
